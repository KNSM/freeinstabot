const { Telegraf } = require('telegraf');
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const https = require('https');

const BOT_TOKEN = '7565868655:AAGaELbwM3BtEPcjWRIR0aVL86t3qglb-YE'; // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
const bot = new Telegraf(BOT_TOKEN);
const videoPath = path.join(__dirname, 'temp_video.mp4');

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ö†Ô∏è Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ö†Ô∏è Uncaught Exception:', error);
});

bot.on('text', async (ctx) => {
    const messageText = ctx.message.text;
    const chatType = ctx.chat.type;

    const botUsername = ctx.botInfo?.username;
    const isGroup = chatType === 'group' || chatType === 'supergroup';
    const isDirectMention = messageText.includes(`@${botUsername}`);
    const isCommand = messageText.startsWith('/reel');

    if (isGroup && !(isCommand || isDirectMention)) return;

    const urlMatch = messageText.match(/https?:\/\/(www\.)?instagram\.com\/reel\/[^\s]+/);
    if (!urlMatch) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels (Instagram)');

    const url = urlMatch[0];
    await ctx.reply('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...');

    try {
        const browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
        });
        const page = await browser.newPage();
        await page.goto('https://snapins.ai/', { waitUntil: 'domcontentloaded' });

        await page.type('input[name="url"]', url);
        await page.click('button[type="submit"]');

        const downloadButton = await page.waitForSelector('[download]', { timeout: 60000 });
        if (!downloadButton) throw new Error('–ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

        const videoUrl = await page.$eval('[download]', (el) => el.href);
        await browser.close();

        const file = fs.createWriteStream(videoPath);
        https.get(videoUrl, (response) => {
            response.pipe(file);
            file.on('finish', async () => {
                try {
                    await ctx.replyWithVideo(
                        { source: videoPath },
                        {
                            caption: '–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ!',
                            supports_streaming: true,
                        }
                    );
                } catch (sendError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', sendError);
                    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                try {
                    fs.unlinkSync(videoPath);
                } catch (unlinkError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', unlinkError);
                }
            });
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.');
    }
});

async function initBot() {
    try {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        const botInfo = await bot.telegram.getMe();
        bot.options.username = botInfo.username;
        console.log(`‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: @${botInfo.username}`);

        await bot.launch();
        console.log(`‚úÖ –ë–æ—Ç @${botInfo.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);

        // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if (bot.options.telegram.webhookReply) {
            console.log('üåç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Webhook');
        } else {
            console.log('üîÑ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Long Polling');
        }
    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
initBot().then(() => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.once('SIGINT', () => {
        console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
        bot.stop('SIGINT');
    });
    process.once('SIGTERM', () => {
        console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
        bot.stop('SIGTERM');
    });
});