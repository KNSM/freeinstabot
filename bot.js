const { Telegraf } = require('telegraf');
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!');
const bot = new Telegraf(BOT_TOKEN);
const videoPath = path.join(__dirname, 'temp_video.mp4');

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Puppeteer –≤ –æ–±–ª–∞–∫–µ
const PUPPETEER_OPTIONS = {
    headless: 'new',
    args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--single-process',
        '--disable-gpu'
    ],
    executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || undefined
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ö†Ô∏è Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ö†Ô∏è Uncaught Exception:', error);
    process.exit(1);
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanup() {
    try {
        if (fs.existsSync(videoPath)) {
            fs.unlinkSync(videoPath);
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', err);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
bot.on('text', async (ctx) => {
    const { text, chat } = ctx.message;
    const botUsername = ctx.botInfo.username;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    const isGroup = ['group', 'supergroup'].includes(chat.type);
    const isMentioned = text.includes(`@${botUsername}`);
    const isCommand = text.startsWith('/reel');

    if (isGroup && !(isCommand || isMentioned)) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    const urlMatch = text.match(/https?:\/\/(www\.)?instagram\.com\/(reel|p)\/[^\s]+/i);
    if (!urlMatch) return ctx.reply('üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel –∏–ª–∏ Post');

    const url = urlMatch[0];
    await ctx.replyWithChatAction('upload_video');

    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        await ctx.reply('‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...');
        const browser = await puppeteer.launch(PUPPETEER_OPTIONS);
        const page = await browser.newPage();

        await page.goto('https://snapins.ai/', {
            waitUntil: 'networkidle2',
            timeout: 30000
        });

        await page.type('input[name="url"]', url);
        await page.click('button[type="submit"]');

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await page.waitForSelector('[download]', { timeout: 60000 });
        const videoUrl = await page.$eval('[download]', el => el.href);
        await browser.close();

        // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        const file = fs.createWriteStream(videoPath);
        await new Promise((resolve, reject) => {
            https.get(videoUrl, response => {
                response.pipe(file);
                file.on('finish', resolve);
                file.on('error', reject);
            }).on('error', reject);
        });

        await ctx.replyWithVideo(
            { source: fs.createReadStream(videoPath) },
            {
                caption: 'üé• –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!',
                supports_streaming: true
            }
        );

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.');
    } finally {
        cleanup();
    }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
(async () => {
    try {
        await bot.launch();
        console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        console.log('‚ö° –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', bot.options.telegram.webhookReply ? 'Webhook' : 'Long Polling');
    } catch (err) {
        console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
        process.exit(1);
    }
})();

// Graceful shutdown
['SIGINT', 'SIGTERM'].forEach(signal => {
    process.once(signal, () => {
        console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...`);
        bot.stop(signal);
        cleanup();
        process.exit(0);
    });
});